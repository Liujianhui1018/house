{"ast":null,"code":"import _defineProperty from \"/home/duo/\\u684C\\u9762/app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"/home/duo/\\u684C\\u9762/app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"/home/duo/\\u684C\\u9762/app/src/Components/Table/index.js\",\n    _dec,\n    _class,\n    _temp;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport { Table, Input, InputNumber, Popconfirm, Form, Spin, Button } from 'antd';\nimport 'antd/dist/antd.css';\nimport CollectionCreateForm from '../Create/Create';\nimport Myinput from '../Input/Input';\nimport store from '../../store/store'; // import {createFetchAction,deleteAction,SearchAction,ResetAction,EditAction} from '../../action/action';\n\nimport { connect } from 'react-redux';\nimport { // BrowserRouter,\nRoute // Link,\n// NavLink,\n// Redirect,\n// Switch,\n// withRouter\n} from 'react-router-dom'; //把todolist从state中解构出来\n\nlet mapSetstateToProps = state => {\n  return {\n    todolist: state.todolist\n  };\n}; // let mapDisPatchToprops = (dispatch) => {\n//   return {\n//     fetch:(res)=>{\n//       dispatch(createFetchAction(res))\n//     },\n//     delete:(_id)=>{\n//       dispatch(deleteAction(_id))\n//     },\n//     search:(name)=>{\n//       dispatch(SearchAction(name))\n//     },\n//     reset:()=>{\n//       dispatch(ResetAction())\n//     },\n//     edit:(_id)=>{\n//       dispatch(EditAction(_id))\n//     },\n//     isEditing:(_id)=>{\n//       dispatch(EditAction(_id))\n//     },\n//   }\n// }\n\n\nconst EditableContext = React.createContext(); //修改类\n\nclass EditableCell extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.getInput = () => {\n      if (this.props.inputType === 'number') {\n        return React.createElement(InputNumber, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(Input, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      });\n    };\n\n    this.renderCell = ({\n      getFieldDecorator\n    }) => {\n      const _this$props = this.props,\n            editing = _this$props.editing,\n            dataIndex = _this$props.dataIndex,\n            title = _this$props.title,\n            inputType = _this$props.inputType,\n            record = _this$props.record,\n            index = _this$props.index,\n            children = _this$props.children,\n            restProps = _objectWithoutProperties(_this$props, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n      return React.createElement(\"td\", Object.assign({}, restProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }), editing ? React.createElement(Form.Item, {\n        style: {\n          margin: 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, getFieldDecorator(dataIndex, {\n        rules: [{\n          required: true,\n          message: \"Please Input \".concat(title, \"!\")\n        }],\n        initialValue: record[dataIndex]\n      })(this.getInput())) : children);\n    };\n  }\n\n  render() {\n    return React.createElement(EditableContext.Consumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, this.renderCell);\n  }\n\n} //主组件\n\n\nlet EditableTable = (_dec = connect(mapSetstateToProps), _dec(_class = (_temp = class EditableTable extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.listening = () => {\n      this.setState({\n        data: store.getState().todolist.data\n      });\n    };\n\n    this.deletadata = _id => {\n      this.props.dispatch({\n        type: 'del',\n        payload: _id\n      });\n      this.props.dispatch({\n        type: 'selects'\n      });\n    };\n\n    this.isEditing = record => record._id === this.state.editingKey;\n\n    this.cancel = () => {\n      this.setState({\n        editingKey: ''\n      });\n    };\n\n    this.handleCancel = () => {\n      this.setState({\n        visible: false\n      });\n    };\n\n    this.handleCreate = () => {\n      const form = this.formRef.props.form;\n      form.validateFields((err, values) => {\n        if (err) {\n          return;\n        } //执行增加\n\n\n        this.props.dispatch({\n          type: 'add'\n        }); //增加完成后再次查询\n\n        this.props.dispatch({\n          type: 'selects'\n        }); //清空表单数据\n\n        form.resetFields(); //关闭框\n\n        this.setState({\n          visible: false\n        });\n      });\n    };\n\n    this.showModal = () => {\n      this.setState({\n        visible: true\n      });\n    };\n\n    this.saveFormRef = formRef => {\n      this.formRef = formRef;\n    };\n\n    this.handReset = () => {\n      this.props.dispatch({\n        type: 'selects'\n      });\n    };\n\n    this.state = {\n      editingKey: '',\n      visible: false,\n      loading: false,\n      dataSource: '',\n      list: ''\n    }; //订阅store,监听listening，来设置数据状态\n\n    store.subscribe(this.listening);\n    let data = this.props.todolist.data;\n    this.handSearch = this.handSearch.bind(this);\n    this.handReset = this.handReset.bind(this);\n    this.columns = [{\n      title: '名称',\n      dataIndex: 'name',\n      editable: true\n    }, {\n      title: '简介',\n      dataIndex: 'content',\n      editable: true\n    }, {\n      title: '网址',\n      dataIndex: 'url',\n      editable: true\n    }, {\n      title: '资源',\n      dataIndex: 'source',\n      editable: true\n    }, {\n      title: '类型',\n      dataIndex: 'type',\n      editable: true\n    }, {\n      title: '时间',\n      dataIndex: 'time',\n      editable: true\n    }, {\n      title: '修改',\n      dataIndex: 'operation',\n      render: (text, record) => {\n        const editingKey = this.state.editingKey;\n        const editable = this.isEditing(record);\n        return editable ? React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }, React.createElement(EditableContext.Consumer, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        }, form => React.createElement(\"a\", {\n          onClick: () => this.save(form, record._id),\n          style: {\n            marginRight: 8\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 162\n          },\n          __self: this\n        }, \"\\u4FDD\\u5B58\")), React.createElement(Popconfirm, {\n          title: \"\\u786E\\u5B9A\\u53D6\\u6D88\",\n          onConfirm: () => this.cancel(record._id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: \"/\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171\n          },\n          __self: this\n        }, \"\\u53D6\\u6D88\"))) : React.createElement(\"a\", {\n          disabled: editingKey !== '',\n          onClick: () => this.edit(record._id),\n          href: \"/\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175\n          },\n          __self: this\n        }, \"\\u4FEE\\u6539\");\n      }\n    }, {\n      title: '删除',\n      dataIndex: 'delete',\n      render: (text, record) => data.length >= 0 ? React.createElement(Popconfirm, {\n        title: \"\\u786E\\u5B9A\\u5220\\u9664\",\n        onConfirm: () => this.deletadata(record._id),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"/\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      }, \"\\u5220\\u9664\")) : null\n    }];\n  } //改变数据状态方法\n\n\n  save(form, _id) {\n    form.validateFields((error, row) => {\n      if (error) {\n        return;\n      }\n\n      row.id = _id;\n      fetch('http://localhost:8070/edit', {\n        method: 'POST',\n        body: JSON.stringify(row)\n      });\n    }); //修改提交后再次查询\n\n    this.props.dispatch({\n      type: 'selects'\n    });\n    this.setState({\n      editingKey: \"\"\n    });\n  }\n\n  edit(_id) {\n    this.setState({\n      editingKey: _id\n    });\n  }\n\n  //搜索方法\n  handSearch(value) {\n    this.props.dispatch({\n      type: 'searchs',\n      payload: value\n    });\n  } //重置方法\n\n\n  //生命周期加载后\n  componentDidMount() {\n    this.props.dispatch({\n      type: 'selects'\n    });\n  }\n\n  render() {\n    let data = this.props.todolist.data;\n    const components = {\n      body: {\n        cell: EditableCell\n      }\n    };\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return _objectSpread({}, col, {\n        onCell: record => ({\n          record,\n          inputType: col.dataIndex === 'age' ? 'number' : 'text',\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: this.isEditing(record)\n        })\n      });\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }, data ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, React.createElement(Myinput, {\n      handSearch: this.handSearch,\n      handReset: this.handReset,\n      style: {\n        marginTop: 100\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }), React.createElement(Route, {\n      to: \"/adddata\",\n      component: creates,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }), React.createElement(CollectionCreateForm, {\n      wrappedComponentRef: this.saveFormRef,\n      visible: this.state.visible,\n      onCancel: this.handleCancel,\n      onCreate: this.handleCreate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317\n      },\n      __self: this\n    }), React.createElement(EditableContext.Provider, {\n      value: this.props.form,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, React.createElement(Table, {\n      components: components,\n      bordered: true,\n      dataSource: data,\n      columns: columns,\n      rowClassName: \"editable-row\",\n      pagination: {\n        onChange: this.cancel\n      },\n      rowKey: data => data.key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }))) : React.createElement(Spin, {\n      style: {\n        marginLeft: '900px',\n        marginTop: '200px'\n      },\n      tip: \"\\u52A0\\u8F7D\\u4E2D...\",\n      size: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337\n      },\n      __self: this\n    }));\n  }\n\n}, _temp)) || _class);\nconst EditableFormTable = Form.create()(EditableTable);\n\nconst creates = props => {\n  const click = () => {\n    props.history.replace('/adddata');\n  };\n\n  return React.createElement(Button, {\n    type: \"primary\",\n    onClick: click,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 352\n    },\n    __self: this\n  }, \"\\u521B\\u5EFA\");\n};\n\nclass Mytable extends Component {\n  render() {\n    return React.createElement(EditableFormTable, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Mytable;","map":{"version":3,"sources":["/home/duo/桌面/app/src/Components/Table/index.js"],"names":["React","Component","Table","Input","InputNumber","Popconfirm","Form","Spin","Button","CollectionCreateForm","Myinput","store","connect","Route","mapSetstateToProps","state","todolist","EditableContext","createContext","EditableCell","getInput","props","inputType","renderCell","getFieldDecorator","editing","dataIndex","title","record","index","children","restProps","margin","rules","required","message","initialValue","render","EditableTable","constructor","listening","setState","data","getState","deletadata","_id","dispatch","type","payload","isEditing","editingKey","cancel","handleCancel","visible","handleCreate","form","formRef","validateFields","err","values","resetFields","showModal","saveFormRef","handReset","loading","dataSource","list","subscribe","handSearch","bind","columns","editable","text","save","marginRight","edit","length","error","row","id","fetch","method","body","JSON","stringify","value","componentDidMount","components","cell","map","col","onCell","marginTop","creates","onChange","key","marginLeft","EditableFormTable","create","click","history","replace","Mytable"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport { Table, Input, InputNumber, Popconfirm, Form, Spin, Button,} from 'antd';\nimport 'antd/dist/antd.css';\nimport CollectionCreateForm from '../Create/Create'\nimport Myinput from '../Input/Input'; \nimport store from '../../store/store';\n// import {createFetchAction,deleteAction,SearchAction,ResetAction,EditAction} from '../../action/action';\nimport {connect} from 'react-redux';\nimport {\n  // BrowserRouter,\n  Route,\n  // Link,\n  // NavLink,\n  // Redirect,\n  // Switch,\n  // withRouter\n} from 'react-router-dom';\n\n//把todolist从state中解构出来\nlet mapSetstateToProps = (state) => {\n  return {\n    todolist : state.todolist,\n  }\n}\n\n// let mapDisPatchToprops = (dispatch) => {\n//   return {\n//     fetch:(res)=>{\n//       dispatch(createFetchAction(res))\n//     },\n//     delete:(_id)=>{\n//       dispatch(deleteAction(_id))\n//     },\n//     search:(name)=>{\n//       dispatch(SearchAction(name))\n//     },\n//     reset:()=>{\n//       dispatch(ResetAction())\n//     },\n//     edit:(_id)=>{\n//       dispatch(EditAction(_id))\n//     },\n//     isEditing:(_id)=>{\n//       dispatch(EditAction(_id))\n//     },\n//   }\n// }\n\n\nconst EditableContext = React.createContext();\n\n\n//修改类\nclass EditableCell extends React.Component {\n    getInput = () => {\n      if (this.props.inputType === 'number') {\n        return <InputNumber />;\n      }\n      return <Input />;\n    };\n  \n    renderCell = ({ getFieldDecorator }) => {\n      const {\n        editing,\n        dataIndex,\n        title,\n        inputType,\n        record,\n        index,\n        children,\n        ...restProps\n      } = this.props;\n      return (\n        <td {...restProps}>\n          {editing ? (\n            <Form.Item style={{ margin: 0 }}>\n              {getFieldDecorator(dataIndex, {\n                rules: [\n                  {\n                    required: true,\n                    message: `Please Input ${title}!`,\n                  },\n                ],\n                initialValue: record[dataIndex],\n              })(this.getInput())}\n            </Form.Item>\n          ) : (\n            children\n          )}\n        </td>\n      );\n    };\n  \n    render() {\n\n      return <EditableContext.Consumer>{this.renderCell}</EditableContext.Consumer>;\n    }\n}\n\n//主组件\n@connect(mapSetstateToProps)\nclass EditableTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { \n      editingKey: '',\n      visible: false, \n      loading: false,\n      dataSource: '',\n      list:'',\n    };\n\n    //订阅store,监听listening，来设置数据状态\n    store.subscribe(this.listening);\n    let data = this.props.todolist.data;\n\n    this.handSearch = this.handSearch.bind(this)\n    this.handReset = this.handReset.bind(this)\n\n\n    this.columns = [\n      {\n        title: '名称',\n        dataIndex: 'name',\n        editable: true,\n      },\n      {\n        title: '简介',\n        dataIndex: 'content',\n        editable: true,\n      },\n      {\n        title: '网址',\n        dataIndex: 'url',\n        editable: true,\n      },\n      {\n        title: '资源',\n        dataIndex: 'source',\n        editable: true,\n      },\n      {\n        title: '类型',\n        dataIndex: 'type',\n        editable: true,\n      },\n      {\n        title: '时间',\n        dataIndex: 'time',\n        editable: true,\n      },\n      {\n        title: '修改',\n        dataIndex: 'operation',\n        render: (text, record) => {\n          const { editingKey } = this.state;\n          const editable = this.isEditing(record);\n          return editable ? (\n            <span>\n              <EditableContext.Consumer>\n                {form => (\n                  <a \n                    onClick={() => this.save(form, record._id)}\n                    style={{ marginRight: 8 }}\n                  >\n                    保存\n                  </a>\n                )}\n              </EditableContext.Consumer>\n              <Popconfirm title=\"确定取消\" onConfirm={() => this.cancel(record._id)}>\n                <a href='/'>取消</a>\n              </Popconfirm>\n            </span>\n          ) : (\n            <a disabled={editingKey !== ''} onClick={() => this.edit(record._id)} href='/'>\n              修改\n            </a>\n          );\n        },\n      },\n      {\n        title: '删除',\n        dataIndex: 'delete',\n\n        render: (text, record) =>\n          data.length >= 0 ? (\n            <Popconfirm title=\"确定删除\" onConfirm={() =>this.deletadata(record._id)}>\n              <a href='/'>删除</a>\n            </Popconfirm>\n          ) : null,\n      },\n    ];\n  }\n\n  //改变数据状态方法\n  listening = () => {\n    this.setState ({\n      data:store.getState().todolist.data,\n    }) \n  }\n\n  // 删除方法\n  deletadata=(_id)=>{\n    this.props.dispatch({type:'del',payload:_id })\n    this.props.dispatch({type:'selects' })\n  }\n\n  //编辑组件四方法\n  isEditing = record => record._id === this.state.editingKey;\n\n  cancel = () => {\n    this.setState({ editingKey: '' });\n  };\n\n  save(form, _id) {\n    form.validateFields((error, row) => {\n      if (error) {\n        return;\n      }\n\n      row.id=_id\n      fetch ('http://localhost:8070/edit',{\n        method:'POST',\n        body:JSON.stringify(row) \n      })  \n    });\n    //修改提交后再次查询\n    this.props.dispatch({type:'selects' })\n    this.setState({ editingKey: \"\" });\n  }\n\n  edit(_id) {\n    this.setState({ editingKey: _id });\n  }\n\n  \n  handleCancel = () => {\n    this.setState({ visible: false });\n  };\n\n  //添加方法\n  handleCreate = () => {\n    const { form } = this.formRef.props;\n    form.validateFields((err, values) => {\n      if (err) {\n        return;\n      }\n      //执行增加\n      this.props.dispatch({type:'add' })\n      //增加完成后再次查询\n      this.props.dispatch({type:'selects' })\n      //清空表单数据\n      form.resetFields();\n      //关闭框\n      this.setState({ \n        visible: false \n      });\n    });\n  };\n\n  showModal = () => {\n    this.setState({ visible: true });\n  };\n\n  saveFormRef = formRef => {\n    this.formRef = formRef;\n  };\n\n  //搜索方法\n  handSearch(value){\n    this.props.dispatch({type:'searchs',payload:value })\n  }\n\n  //重置方法\n  handReset=()=>{\n    this.props.dispatch({type:'selects' })\n  }\n\n  //生命周期加载后\n  componentDidMount(){\n    this.props.dispatch({type:'selects' })\n  }\n\n\n  render() {\n    let data = this.props.todolist.data;\n    const components = {\n      body: {\n        cell: EditableCell,\n      },\n    };\n\n    const columns = this.columns.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n      return {\n        ...col,\n        onCell: record => ({\n          record,\n          inputType: col.dataIndex === 'age' ? 'number' : 'text',\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: this.isEditing(record),\n        }),\n      };\n    });\n\n    return (\n      <div>\n        { data\n          ?<div>\n              <Myinput handSearch={this.handSearch} handReset={this.handReset} style={{marginTop:100}}></Myinput>\n              {/* 创建 */}\n              <Route to=\"/adddata\" component={creates}></Route>\n\n              <CollectionCreateForm\n                wrappedComponentRef={this.saveFormRef}\n                visible={this.state.visible}\n                onCancel={this.handleCancel}\n                onCreate={this.handleCreate}\n              />\n              <EditableContext.Provider value={this.props.form}>\n                <Table\n                  components={components}\n                  bordered\n                  dataSource={data}\n                  columns={columns}\n                  rowClassName=\"editable-row\"\n                  pagination={{\n                    onChange: this.cancel,\n                  }}\n                  rowKey={(data)=>data.key}\n                />\n              </EditableContext.Provider>\n            </div>\n          : <Spin style={{marginLeft:'900px',marginTop:'200px'}} tip=\"加载中...\" size='large'/>\n        }\n      </div>\n      \n    );\n  }\n}\n\nconst EditableFormTable = Form.create()(EditableTable);\n\nconst creates = (props) => {\n  const click=()=>{\n    props.history.replace('/adddata');\n  }\n  return(\n    <Button type='primary' onClick={click}>创建</Button>\n  )\n}\n\n\nclass Mytable extends Component{ \n    render(){\n        return <EditableFormTable />\n    }\n}\n\nexport default Mytable;"]},"metadata":{},"sourceType":"module"}